// extending using @extend method

/*
We can use %btn {class info} then %btn-default, %btn-hot, %btn-cool, so the output in style.css will be only those three options, not the main .btn class

*/

$color-btn-text: $color-backgrounds;
$color-btn-default: $color-main;
$color-btn-hot: $red;
$color-btn-cool: $blue;
$roundeness: 20px 0 20px 0; // this is a list, and it will create a effect for list items 

.btn {
  display: inline-block;
  padding: 6px 12px;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  cursor: pointer;
  border: none;
  border-radius: 4px;
  font-family: $font-main;
  user-select: none;
  color: $color-btn-text;
}

$color-btn-names: 'default','hot','cool';
$color-btn-values: $color-btn-default, $red, $blue;

$color-btn: (
  default: $color-main, 
  hot: $red,
  cool: $blue
);

@each $key, $value in $color-btn{

  .btn-#{$key} {
    @extend %btn !optional;
    background-color: value;
  }
}

.btn-default {
  @extend .btn;
  background: $color-btn-default;
}

.btn-hot {
  @extend .btn;
  background: $color-btn-hot;
}

.btn-cool {
  @extend .btn;
  background: $color-btn-cool;
}

// Chapter 03 - working with math operations
.grid {
  // first we need to clear floats etc
  @include clearfix;
  .item {
    float: left;
    @include imagegrid(5, 1%);
  }
  img {
      display: block;
      border-radius: $roundeness; // image is a square with 4 sides, roudness will square two of the edges..
      max-width: 100%;
  }
}